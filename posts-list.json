[
  {
    "id": "2025-06-25-hello-world",
    "fileName": "2025-06-25-hello-world.html",
    "filePath": "other/2025-06-25-hello-world.html",
    "title": "hello-world",
    "description": "---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more in...",
    "publishedAt": "2025-06-25",
    "category": "other",
    "categoryDisplayName": "其他",
    "tags": [],
    "readTime": "1 分钟阅读",
    "views": 424,
    "featured": false,
    "excerpt": "---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you c..."
  },
  {
    "id": "2025-06-25-token",
    "fileName": "2025-06-25-token.html",
    "filePath": "ai-tools/2025-06-25-token.html",
    "title": "token上下文策略",
    "description": "【AgentX】token上下文策略\r\n\r\n基于 AgentX 项目的实际代码实现，我来回答这些面试问题：\r\n\r\n 🏗️ 系统设计类问题\r\n\r\n 1. \"请设计一个支持多种 Token 管理策略的可扩展架构\"\r\n\r\n基于 AgentX 的回答：\r\n\r\nAgentX 采用了策略...",
    "publishedAt": "2025-06-25",
    "category": "ai-tools",
    "categoryDisplayName": "AI工具",
    "tags": [],
    "readTime": "10 分钟阅读",
    "views": 142,
    "featured": false,
    "excerpt": "【AgentX】token上下文策略\r\n\r\n基于 AgentX 项目的实际代码实现，我来回答这些面试问题：\r\n\r\n 🏗️ 系统设计类问题\r\n\r\n 1. \"请设计一个支持多种 Token 管理策略的可扩展架构\"\r\n\r\n基于 AgentX 的回答：\r\n\r\nAgentX 采用了策略模式 + 工厂模式的经典架构：\r\n\r\n```java\r\n// 策略接口\r\npublic interf..."
  },
  {
    "id": "2025-06-25-cursor",
    "fileName": "2025-06-25-cursor.html",
    "filePath": "ai-tools/2025-06-25-cursor.html",
    "title": "Cursor使用指北",
    "description": "Cursor使用指北\r\n\r\n Rules for AI\r\n\r\n前置提示词\r\n\r\n Codebase Indexing\r\n\r\n在初始化项目的时候用于检索项目，可以理解为 cursor 的代码上下文索引，在对话的时候会进行检索关联的代码\r\n\r\n MCP\r\n\r\n让 cursor 支持调用工...",
    "publishedAt": "2025-06-25",
    "category": "ai-tools",
    "categoryDisplayName": "AI工具",
    "tags": [],
    "readTime": "4 分钟阅读",
    "views": 289,
    "featured": false,
    "excerpt": "Cursor使用指北\r\n\r\n Rules for AI\r\n\r\n前置提示词\r\n\r\n Codebase Indexing\r\n\r\n在初始化项目的时候用于检索项目，可以理解为 cursor 的代码上下文索引，在对话的时候会进行检索关联的代码\r\n\r\n MCP\r\n\r\n让 cursor 支持调用工具的能力，详情后面会出文章描述\r\n\r\n Docs\r\n\r\n可以将公司的开发文档或者当前使用框架的文..."
  },
  {
    "id": "2025-06-25-mcp",
    "fileName": "2025-06-25-mcp.html",
    "filePath": "ai-tools/2025-06-25-mcp.html",
    "title": "MCP",
    "description": "MCP 和 Function Call\r\n\r\n 困惑\r\n\r\n1. 有哪些模型支持MCP？\r\n2. 只有支持函数调用的模型才能使用MCP吗？\r\n3. MCP能脱离LLM调用吗？\r\n\r\n 概念\r\n\r\n- MCP是协议，是一套标准\r\n- Function Call / Tool Cal...",
    "publishedAt": "2025-06-25",
    "category": "ai-tools",
    "categoryDisplayName": "AI工具",
    "tags": [],
    "readTime": "1 分钟阅读",
    "views": 323,
    "featured": true,
    "excerpt": "MCP 和 Function Call\r\n\r\n 困惑\r\n\r\n1. 有哪些模型支持MCP？\r\n2. 只有支持函数调用的模型才能使用MCP吗？\r\n3. MCP能脱离LLM调用吗？\r\n\r\n 概念\r\n\r\n- MCP是协议，是一套标准\r\n- Function Call / Tool Call是模型的基本能力，可以返回格式化工具调用的能力\r\n\r\n 从调用流程角度..."
  },
  {
    "id": "2025-06-25-agent",
    "fileName": "2025-06-25-agent.html",
    "filePath": "ai-tools/2025-06-25-agent.html",
    "title": "做一个本地浏览器Agent",
    "description": "开发步骤\r\n根据参考文档，https://docs.browser-use.com/customize/real-browser\r\n用cursor写一个简单的python flask应用\r\n准备好OpenAl或者Claude的APIKey，就可以运行了\r\n\r\n- 如何申请APIhttps://www...",
    "publishedAt": "2025-06-25",
    "category": "ai-tools",
    "categoryDisplayName": "AI工具",
    "tags": [],
    "readTime": "1 分钟阅读",
    "views": 464,
    "featured": false,
    "excerpt": "开发步骤\r\n根据参考文档，https://docs.browser-use.com/customize/real-browser\r\n用cursor写一个简单的python flask应用\r\n准备好OpenAl或者Claude的APIKey，就可以运行了\r\n\r\n- 如何申请APIhttps://www.bilibili.com/video/BV1PqKKeeEnm/?spm_id_from=333...."
  },
  {
    "id": "2025-06-25-wsldocker",
    "fileName": "2025-06-25-wsldocker.html",
    "filePath": "devops/2025-06-25-wsldocker.html",
    "title": "WSL、Docker 迁移",
    "description": "WSL、Docker 迁移\r\n\r\nWindows WSL Docker 默认安装路径在C盘的，导致岌岌可危的C盘空间😱更加吃紧，一不小心就要出现👇这种情况了\r\n\r\n![image](https://img2024.cnblogs.com/blog/1131701/202408/1131701...",
    "publishedAt": "2025-06-25",
    "category": "devops",
    "categoryDisplayName": "DevOps",
    "tags": [],
    "readTime": "3 分钟阅读",
    "views": 459,
    "featured": true,
    "excerpt": "WSL、Docker 迁移\r\n\r\nWindows WSL Docker 默认安装路径在C盘的，导致岌岌可危的C盘空间😱更加吃紧，一不小心就要出现👇这种情况了\r\n\r\n![image](https://img2024.cnblogs.com/blog/1131701/202408/1131701-20240815143048352-1440225869.png)\r\n\r\n接下来我们一起迁移它们吧..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "golang/2025-06-25-post.html",
    "title": "中间件学习",
    "description": "title：中间件学习\r\n\r\nGo 中的 中间件（Middleware） 本质上是 在请求到达处理函数（Handler）之前或之后执行的一系列封装好的逻辑，可以拦截、修改或增强请求和响应的行为。\r\n\r\n在 Web 框架（如 Gin、Echo、net/http） 中，中间...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "3 分钟阅读",
    "views": 144,
    "featured": false,
    "excerpt": "title：中间件学习\r\n\r\nGo 中的 中间件（Middleware） 本质上是 在请求到达处理函数（Handler）之前或之后执行的一系列封装好的逻辑，可以拦截、修改或增强请求和响应的行为。\r\n\r\n在 Web 框架（如 Gin、Echo、net/http） 中，中间件常用于 日志记录、权限校验、错误处理、请求限流等。\r\n\r\n------\r\n\r\n \ud83d..."
  },
  {
    "id": "2025-06-25-gin",
    "fileName": "2025-06-25-gin.html",
    "filePath": "golang/2025-06-25-gin.html",
    "title": "关于Gin框架中间件的执行顺序问题",
    "description": "title:关于Gin框架中间件的执行顺序问题\r\n\r\n代码如下：\r\n\r\n```go\r\npackage main\r\n\r\n// lesson18 中间件\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"net/http\"\r\n\t\"time\"\r\n\r\n\t\"github.com/gin-gonic/gin\"...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "2 分钟阅读",
    "views": 424,
    "featured": false,
    "excerpt": "title:关于Gin框架中间件的执行顺序问题\r\n\r\n代码如下：\r\n\r\n```go\r\npackage main\r\n\r\n// lesson18 中间件\r\n\r\nimport (\r\n\t\"fmt\"\r\n\t\"net/http\"\r\n\t\"time\"\r\n\r\n\t\"github.com/gin-gonic/gin\"\r\n)\r\n\r\n// 属于handlerFunc类型\r\nfunc indexHandler(c gin..."
  },
  {
    "id": "2025-06-25-go",
    "fileName": "2025-06-25-go.html",
    "filePath": "golang/2025-06-25-go.html",
    "title": "关于Go热部署踩坑",
    "description": "关于go开发环境热部署踩坑\r\n\r\nhttps://blog.csdn.net/Theirsky/article/details/135349503\r\n\r\n 在终端中使用air命令,一直出现air windows找不到文件 'APP_ENV=dev’这个错误\r\n\r\n 解决方法是直接在...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "3 分钟阅读",
    "views": 208,
    "featured": true,
    "excerpt": "关于go开发环境热部署踩坑\r\n\r\nhttps://blog.csdn.net/Theirsky/article/details/135349503\r\n\r\n 在终端中使用air命令,一直出现air windows找不到文件 'APP_ENV=dev’这个错误\r\n\r\n 解决方法是直接在配置文件里做文章\r\n\r\n将air.conf 里将配置文件换成\r\n\r\n```\r\n [Air](htt..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "golang/2025-06-25-post.html",
    "title": "项目实战",
    "description": "购物外部开发进阶实战笔记\r\n\r\n\r\n\r\n本文介绍了购物外部开发进阶实战的相关内容，包括框架源码解析、数据库连接、脚手架搭建及项目实战等。\r\n\r\n\r\n\r\n 知识点1：框架源码解析\r\n\r\n\r\n\r\n- 深入解析购物框架源码，理解其内部机制。 > 原文引用：第一部分就是正框架的一个源码解析。...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "5 分钟阅读",
    "views": 117,
    "featured": false,
    "excerpt": "购物外部开发进阶实战笔记\r\n\r\n\r\n\r\n本文介绍了购物外部开发进阶实战的相关内容，包括框架源码解析、数据库连接、脚手架搭建及项目实战等。\r\n\r\n\r\n\r\n 知识点1：框架源码解析\r\n\r\n\r\n\r\n- 深入解析购物框架源码，理解其内部机制。 > 原文引用：第一部分就是正框架的一个源码解析。\r\n\r\n\r\n\r\n 知识点2：数据库连接\r\n\r\n\r\n\r\n- 使用database/sql标准库或re..."
  },
  {
    "id": "2025-06-25-unitygithub",
    "fileName": "2025-06-25-unitygithub.html",
    "filePath": "devops/2025-06-25-unitygithub.html",
    "title": "如何将Unity项目上传到Github进行管理",
    "description": "如何将Unity项目上传到Github进行管理\r\n\r\n 1.下载安装Git\r\n\r\n忽略，自行安装\r\n\r\n 2.在Github上面新建一个仓库\r\n\r\n如下图，这里.gitignore文件十分建议选择Unity模板\r\n\r\n 3.复制仓库地址\r\n\r\n把这里的地址复制一下，后面需要用...",
    "publishedAt": "2025-06-25",
    "category": "devops",
    "categoryDisplayName": "DevOps",
    "tags": [],
    "readTime": "2 分钟阅读",
    "views": 160,
    "featured": false,
    "excerpt": "如何将Unity项目上传到Github进行管理\r\n\r\n 1.下载安装Git\r\n\r\n忽略，自行安装\r\n\r\n 2.在Github上面新建一个仓库\r\n\r\n如下图，这里.gitignore文件十分建议选择Unity模板\r\n\r\n 3.复制仓库地址\r\n\r\n把这里的地址复制一下，后面需要用\r\n\r\n 4.在项目文件夹打开Git Bash\r\n\r\n进入项目文件夹右击选择Git Bash Here..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "golang/2025-06-25-post.html",
    "title": "",
    "description": "---\r\ntitle:Go语言学习打卡\r\n---\r\n\r\n![Go 语言的学习路线图](https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/xuexiluxian/go-7.jpg)\r\n\r\n- [ ] 每天刷十道算法\r\n- [ ] 月底做完...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "1 分钟阅读",
    "views": 154,
    "featured": true,
    "excerpt": "---\r\ntitle:Go语言学习打卡\r\n---\r\n\r\n![Go 语言的学习路线图](https://cdn.tobebetterjavaer.com/tobebetterjavaer/images/xuexiluxian/go-7.jpg)\r\n\r\n- [ ] 每天刷十道算法\r\n- [ ] 月底做完一个gin项目\r\n- [ ] 计网八股\r\n- [ ] 数据库八股\r\n- [ ] go八股星球八股+手..."
  },
  {
    "id": "2025-06-25-channel",
    "fileName": "2025-06-25-channel.html",
    "filePath": "golang/2025-06-25-channel.html",
    "title": "Channel的一系列思考",
    "description": "Title：Channel的一系列思考\r\n\r\n------\r\n\r\n 自动关闭or手动关闭（close）？\t\r\n\r\n​\t学习goroutine和channel的时候发现deadlock，deadlock出现的原因基本就是通道有人生产放入但无取出的操作，就像田径比赛中的4x100接力赛，想要完成...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "9 分钟阅读",
    "views": 449,
    "featured": false,
    "excerpt": "Title：Channel的一系列思考\r\n\r\n------\r\n\r\n 自动关闭or手动关闭（close）？\t\r\n\r\n​\t学习goroutine和channel的时候发现deadlock，deadlock出现的原因基本就是通道有人生产放入但无取出的操作，就像田径比赛中的4x100接力赛，想要完成交棒必须有一个能够接棒的运动员，否则只能等待。简单来说就是无缓冲的通道必须有至少一个接收方才能发送成..."
  },
  {
    "id": "2025-06-25-constitoa",
    "fileName": "2025-06-25-constitoa.html",
    "filePath": "golang/2025-06-25-constitoa.html",
    "title": "const和itoa",
    "description": "---\r\ntitle:const和itoa\r\n---\r\n\r\nconst 用于定义常量，定义之后不能修改，不能再次赋值，在程序运行期间不会改变。\r\n\r\n 定义一个常量\r\n\r\n```go\r\nconst pi = 3.1415926\r\n```\r\n\r\n 批量声明常量\r\n\r\n```go\r\ncons...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "4 分钟阅读",
    "views": 517,
    "featured": false,
    "excerpt": "---\r\ntitle:const和itoa\r\n---\r\n\r\nconst 用于定义常量，定义之后不能修改，不能再次赋值，在程序运行期间不会改变。\r\n\r\n 定义一个常量\r\n\r\n```go\r\nconst pi = 3.1415926\r\n```\r\n\r\n 批量声明常量\r\n\r\n```go\r\nconst (\r\n   statusOk = 200\r\n   notFound = 404\r\n   serv..."
  },
  {
    "id": "2025-06-25-gopath",
    "fileName": "2025-06-25-gopath.html",
    "filePath": "golang/2025-06-25-gopath.html",
    "title": "GOPATH",
    "description": "---\r\n\r\ntilte: GoPATH\r\n\r\n---\r\n\r\n\r\n\r\n一、GOPATH的概念\r\n\r\nGOPATH 是 Go 语言中使用的一个环境变量，它使用绝对路径提供项目的工作目录（也称为工作区）。\r\n\r\n工作目录是一个工程开发的相对参考目录，好比当你要在公司编写一套服务器...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "3 分钟阅读",
    "views": 335,
    "featured": false,
    "excerpt": "---\r\n\r\ntilte: GoPATH\r\n\r\n---\r\n\r\n\r\n\r\n一、GOPATH的概念\r\n\r\nGOPATH 是 Go 语言中使用的一个环境变量，它使用绝对路径提供项目的工作目录（也称为工作区）。\r\n\r\n工作目录是一个工程开发的相对参考目录，好比当你要在公司编写一套服务器代码，你的工位所包含的桌面、计算机及椅子就是你的工作区。\r\n\r\n工作区的概念与工作目录的概念也是类似..."
  },
  {
    "id": "2025-06-25-nil",
    "fileName": "2025-06-25-nil.html",
    "filePath": "golang/2025-06-25-nil.html",
    "title": "nil切片与空切片：深入解析与实际应用指南",
    "description": "---\r\ntitle: Go语言中的nil切片与空切片：深入解析与实际应用指南\r\n---\r\n 一、核心概念解析\r\n\r\n 1.1 nil切片\r\n```go\r\nvar s []int        // nil切片\r\n```\r\n- 底层结构：无底层数组指针\r\n- 长度/容量：0...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "6 分钟阅读",
    "views": 97,
    "featured": true,
    "excerpt": "---\r\ntitle: Go语言中的nil切片与空切片：深入解析与实际应用指南\r\n---\r\n 一、核心概念解析\r\n\r\n 1.1 nil切片\r\n```go\r\nvar s []int        // nil切片\r\n```\r\n- 底层结构：无底层数组指针\r\n- 长度/容量：0\r\n- 判断方式：`s == nil` 返回true\r\n- 内存分配：不占用堆内存..."
  },
  {
    "id": "2025-06-25-status",
    "fileName": "2025-06-25-status.html",
    "filePath": "golang/2025-06-25-status.html",
    "title": "status",
    "description": "title:Status\r\n\r\n`Status` 是一个自定义的枚举类型，而 `String()` 是一个方法，用于实现 `fmt.Stringer` 接口，从而为 `Status` 类型提供字符串表示。这是 Go 语言中非常常见的模式。\r\n\r\n接下来，将详细解释枚举类型、`String()`...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "5 分钟阅读",
    "views": 253,
    "featured": false,
    "excerpt": "title:Status\r\n\r\n`Status` 是一个自定义的枚举类型，而 `String()` 是一个方法，用于实现 `fmt.Stringer` 接口，从而为 `Status` 类型提供字符串表示。这是 Go 语言中非常常见的模式。\r\n\r\n接下来，将详细解释枚举类型、`String()` 方法的作用，以及其他常见的接口和方法。\r\n\r\n---\r\n\r\n 1. 枚举类型与 `Stri..."
  },
  {
    "id": "2025-06-25-goroutine",
    "fileName": "2025-06-25-goroutine.html",
    "filePath": "golang/2025-06-25-goroutine.html",
    "title": "什么是Goroutine内存泄漏？",
    "description": "title：Goroutine内存泄漏\r\n\r\nGo语言作为一门现代化的编程语言，以其简洁、高效和并发特性而备受开发者的青睐。其中最重要的特性之一就是Goroutine，它使得并发编程变得更加简单和高效。然而，如果不正确地使用Goroutine，就可能会引发内存泄漏问题，导致程序的性能下降甚至崩溃。本...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "2 分钟阅读",
    "views": 453,
    "featured": false,
    "excerpt": "title：Goroutine内存泄漏\r\n\r\nGo语言作为一门现代化的编程语言，以其简洁、高效和并发特性而备受开发者的青睐。其中最重要的特性之一就是Goroutine，它使得并发编程变得更加简单和高效。然而，如果不正确地使用Goroutine，就可能会引发内存泄漏问题，导致程序的性能下降甚至崩溃。本文将详细介绍什么情况下会发生Goroutine的内存泄漏，并提供一些有效的方法来避免这些问题。..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "golang/2025-06-25-post.html",
    "title": "并发编程学习",
    "description": "并发编程学习\r\n\r\n同步就是按照某个特定顺序进行操作\r\n\r\n同步关系:进程之间的操作事件存在时序关系，比如先后关系，我们在真题会遇到这种说法\"操作C必须在操作 A、B之后完成”，也就是在告诉你这里有一个同步关系，需要你用信号量去定义。\r\n\r\n并发就是在一个时间段内完成一系列任务（比如在一个时间段...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "2 分钟阅读",
    "views": 479,
    "featured": false,
    "excerpt": "并发编程学习\r\n\r\n同步就是按照某个特定顺序进行操作\r\n\r\n同步关系:进程之间的操作事件存在时序关系，比如先后关系，我们在真题会遇到这种说法\"操作C必须在操作 A、B之后完成”，也就是在告诉你这里有一个同步关系，需要你用信号量去定义。\r\n\r\n并发就是在一个时间段内完成一系列任务（比如在一个时间段内你给两个人聊天）\r\n\r\n异步：执行时互不影响，执行时没有先后顺序\r\n\r\n同步：执行时有一定的次序关..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "golang/2025-06-25-post.html",
    "title": "数值常量的类型转换和二进制需要注意的坑",
    "description": "---\r\ntitle:数值常量的类型转换和二进制需要注意的坑\r\n---\r\n\r\n 数值常量\r\n\r\n数值常量是高精度的 值。\r\n\r\n一个未指定类型的常量由上下文来决定其类型。\r\n\r\n源代码是这样的\r\n\r\n```go\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\nconst...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "2 分钟阅读",
    "views": 91,
    "featured": true,
    "excerpt": "---\r\ntitle:数值常量的类型转换和二进制需要注意的坑\r\n---\r\n\r\n 数值常量\r\n\r\n数值常量是高精度的 值。\r\n\r\n一个未指定类型的常量由上下文来决定其类型。\r\n\r\n源代码是这样的\r\n\r\n```go\r\npackage main\r\n\r\nimport \"fmt\"\r\n\r\nconst (\r\n\t// 将 1 左移 100 位来创建一个非常大的数字\r\n\t// 即这个数的二进制是 1 后..."
  },
  {
    "id": "2025-06-25-gogo-mod-tidygo-mod-vendor",
    "fileName": "2025-06-25-gogo-mod-tidygo-mod-vendor.html",
    "filePath": "golang/2025-06-25-gogo-mod-tidygo-mod-vendor.html",
    "title": "深入理解Go模块管理：探讨go mod tidy和go mod vendor",
    "description": "title： 深入理解 Go 模块管理：探讨 `go mod tidy` 和 `go mod vendor`\r\n\r\nGo 语言的模块管理功能极大地简化了依赖管理。本文深入探讨了 go mod tidy 和 go mod vendor 这两个命令的内部机制、使用场景以及它们如何优化 Go 项目。...",
    "publishedAt": "2025-06-25",
    "category": "golang",
    "categoryDisplayName": "Go语言",
    "tags": [],
    "readTime": "1 分钟阅读",
    "views": 352,
    "featured": true,
    "excerpt": "title： 深入理解 Go 模块管理：探讨 `go mod tidy` 和 `go mod vendor`\r\n\r\nGo 语言的模块管理功能极大地简化了依赖管理。本文深入探讨了 go mod tidy 和 go mod vendor 这两个命令的内部机制、使用场景以及它们如何优化 Go 项目。\r\n\r\n go mod tidy：保持依赖整洁\r\n\r\n 内部机制\r\n\r\n- 扫描项目中所有的..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "java/2025-06-25-post.html",
    "title": "代理的理解",
    "description": "代理\r\n\r\n在学习设计模式的过程中，代理模式绕不开，本次文章的任务是先学习代理模式，然后以此为衍生学习动态代理和静态代理。\r\n\r\n首先要了解以下基础概念：\r\n\r\n1. 反射\r\n2. 代理\r\n\r\n 反射\r\n\r\n 1. 什么是反射调用？\r\n\r\n反射（Reflection）是一种...",
    "publishedAt": "2025-06-25",
    "category": "java",
    "categoryDisplayName": "Java",
    "tags": [],
    "readTime": "15 分钟阅读",
    "views": 408,
    "featured": false,
    "excerpt": "代理\r\n\r\n在学习设计模式的过程中，代理模式绕不开，本次文章的任务是先学习代理模式，然后以此为衍生学习动态代理和静态代理。\r\n\r\n首先要了解以下基础概念：\r\n\r\n1. 反射\r\n2. 代理\r\n\r\n 反射\r\n\r\n 1. 什么是反射调用？\r\n\r\n反射（Reflection）是一种 运行时 机制，它允许 Java 程序在 不知道类的情况下，动态地获取类的信息，并调用它..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "java/2025-06-25-post.html",
    "title": "类加载机制",
    "description": "【Java语言学习】类加载机制\r\n\r\n 前置知识\r\n\r\n 🧠 1. 懒加载（Lazy Loading）\r\n\r\n概念：懒加载是指延迟加载类或对象，直到真正需要用到时才加载或初始化，以节省资源、加快启动速度。\r\n\r\n在类加载中体现：\r\n\r\n- Java 中...",
    "publishedAt": "2025-06-25",
    "category": "java",
    "categoryDisplayName": "Java",
    "tags": [],
    "readTime": "22 分钟阅读",
    "views": 268,
    "featured": true,
    "excerpt": "【Java语言学习】类加载机制\r\n\r\n 前置知识\r\n\r\n 🧠 1. 懒加载（Lazy Loading）\r\n\r\n概念：懒加载是指延迟加载类或对象，直到真正需要用到时才加载或初始化，以节省资源、加快启动速度。\r\n\r\n在类加载中体现：\r\n\r\n- Java 中，类的加载是按需触发的。\r\n- 静态内部类实现单例模式就用到了懒加载：\r\n\r\n```java..."
  },
  {
    "id": "2025-06-25-mini_jvm",
    "fileName": "2025-06-25-mini_jvm.html",
    "filePath": "java/2025-06-25-mini_jvm.html",
    "title": "一个Mini_JVM实现",
    "description": "类加载系统（ClassLoader）：\r\n\r\n让我们看看BootstrapClassLoader的实现：\r\n\r\nRead file: src/main/java/club/shengsheng/jvm/BootstrapClassLoader.java\r\n类加载器的工作原理：\r\n1....",
    "publishedAt": "2025-06-25",
    "category": "java",
    "categoryDisplayName": "Java",
    "tags": [],
    "readTime": "2 分钟阅读",
    "views": 113,
    "featured": false,
    "excerpt": "类加载系统（ClassLoader）：\r\n\r\n让我们看看BootstrapClassLoader的实现：\r\n\r\nRead file: src/main/java/club/shengsheng/jvm/BootstrapClassLoader.java\r\n类加载器的工作原理：\r\n1. 接收类路径列表（classpath）\r\n2. 根据全限定类名（如：java.lang.String）..."
  },
  {
    "id": "2025-06-25-operand-stack",
    "fileName": "2025-06-25-operand-stack.html",
    "filePath": "java/2025-06-25-operand-stack.html",
    "title": "操作数栈（Operand Stack）",
    "description": "操作数栈（Operand Stack）的概念。\r\n\r\n操作数栈是用来存储操作的数据的，而不是存储操作命令。我用一个简单的例子来说明：\r\n\r\n假设我们有这样一段Java代码：\r\n```java\r\nint a = 1;\r\nint b = 2;\r\nint c = a + b;\r\n```\r\n\r\n这段...",
    "publishedAt": "2025-06-25",
    "category": "java",
    "categoryDisplayName": "Java",
    "tags": [],
    "readTime": "2 分钟阅读",
    "views": 435,
    "featured": false,
    "excerpt": "操作数栈（Operand Stack）的概念。\r\n\r\n操作数栈是用来存储操作的数据的，而不是存储操作命令。我用一个简单的例子来说明：\r\n\r\n假设我们有这样一段Java代码：\r\n```java\r\nint a = 1;\r\nint b = 2;\r\nint c = a + b;\r\n```\r\n\r\n这段代码在JVM中的执行过程是这样的：\r\n\r\n1. 加载数据到操作数栈：\r\n```\r\nicons..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "java/2025-06-25-post.html",
    "title": "方法区",
    "description": "让我详细解释方法区（Method Area）的概念和位置。\r\n\r\n在JVM的内存结构中，方法区是一个非常重要的部分。让我们通过JVM的整体内存结构来理解：\r\n\r\n1. JVM内存结构：\r\n```\r\nJVM内存\r\n├── 堆区（Heap）\r\n│   ├── 新生代\r\n│   │   ├── E...",
    "publishedAt": "2025-06-25",
    "category": "java",
    "categoryDisplayName": "Java",
    "tags": [],
    "readTime": "3 分钟阅读",
    "views": 113,
    "featured": false,
    "excerpt": "让我详细解释方法区（Method Area）的概念和位置。\r\n\r\n在JVM的内存结构中，方法区是一个非常重要的部分。让我们通过JVM的整体内存结构来理解：\r\n\r\n1. JVM内存结构：\r\n```\r\nJVM内存\r\n├── 堆区（Heap）\r\n│   ├── 新生代\r\n│   │   ├── Eden区\r\n│   │   ├── Survivor 0\r\n│   │   └── Survivor..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "java/2025-06-25-post.html",
    "title": "架构以及交互基本流程",
    "description": "我将使用两种方式来展示JVM的主要架构：目录结构和Mermaid图。\r\n\r\n1. 目录结构形式：\r\n```\r\nJVM架构\r\n├── 类加载子系统 (Class Loading Subsystem)\r\n│   ├── 加载 (Loading)\r\n│   │   ├── Bootstrap Cl...",
    "publishedAt": "2025-06-25",
    "category": "java",
    "categoryDisplayName": "Java",
    "tags": [],
    "readTime": "4 分钟阅读",
    "views": 501,
    "featured": false,
    "excerpt": "我将使用两种方式来展示JVM的主要架构：目录结构和Mermaid图。\r\n\r\n1. 目录结构形式：\r\n```\r\nJVM架构\r\n├── 类加载子系统 (Class Loading Subsystem)\r\n│   ├── 加载 (Loading)\r\n│   │   ├── Bootstrap ClassLoader\r\n│   │   ├── Extension ClassLoader\r\n│..."
  },
  {
    "id": "2025-06-25-2022",
    "fileName": "2025-06-25-2022.html",
    "filePath": "algorithm/2025-06-25-2022.html",
    "title": "2022年",
    "description": "[toc]\r\n\r\n\r\n\r\n 快速排序\r\n\r\n```c\r\ninclude<stdio.h>\r\nvoid swap(int i,int j)\r\n{\r\n    int temp = i;\r\n    i = j;\r\n    j = temp;\r\n}\r\n\r\nvoid quick_sort(in...",
    "publishedAt": "2025-06-25",
    "category": "algorithm",
    "categoryDisplayName": "算法",
    "tags": [],
    "readTime": "33 分钟阅读",
    "views": 156,
    "featured": false,
    "excerpt": "[toc]\r\n\r\n\r\n\r\n 快速排序\r\n\r\n```c\r\ninclude<stdio.h>\r\nvoid swap(int i,int j)\r\n{\r\n    int temp = i;\r\n    i = j;\r\n    j = temp;\r\n}\r\n\r\nvoid quick_sort(int q[],int l,int r){\r\n    if(l>=r) return ;\r\n    in..."
  },
  {
    "id": "2025-06-25-2023-2024",
    "fileName": "2025-06-25-2023-2024.html",
    "filePath": "algorithm/2025-06-25-2023-2024.html",
    "title": "2023年-2024年",
    "description": "刷题记录\r\n\r\n取余法则\r\n\r\n（S1+S2）%b = （S1%b+S2%b）%b， S1S2%b=(S1%B)(S2%b)%b\r\n\r\n 快排\r\n\r\n[912. 排序数组 - 力扣（LeetCode）](https://leetcode.cn/problems/sort-an-array/)...",
    "publishedAt": "2025-06-25",
    "category": "algorithm",
    "categoryDisplayName": "算法",
    "tags": [],
    "readTime": "14 分钟阅读",
    "views": 62,
    "featured": false,
    "excerpt": "刷题记录\r\n\r\n取余法则\r\n\r\n（S1+S2）%b = （S1%b+S2%b）%b， S1S2%b=(S1%B)(S2%b)%b\r\n\r\n 快排\r\n\r\n[912. 排序数组 - 力扣（LeetCode）](https://leetcode.cn/problems/sort-an-array/)\r\n\r\n[面试题 17.09. 第 k 个数 - 力扣（LeetCode）](https://lee..."
  },
  {
    "id": "2025-06-25-2025",
    "fileName": "2025-06-25-2025.html",
    "filePath": "algorithm/2025-06-25-2025.html",
    "title": "2025年备战春招",
    "description": "---\r\n title: 【Leetcode刷题】2025年备战春招.md\r\n---\r\n 数据结构目录\r\n\r\n| 数据结构                                     | 变种...",
    "publishedAt": "2025-06-25",
    "category": "algorithm",
    "categoryDisplayName": "算法",
    "tags": [],
    "readTime": "12 分钟阅读",
    "views": 77,
    "featured": true,
    "excerpt": "---\r\n title: 【Leetcode刷题】2025年备战春招.md\r\n---\r\n 数据结构目录\r\n\r\n| 数据结构                                     | 变种                                                         | 相关题目                    | 讲解文章..."
  },
  {
    "id": "2025-06-25-spring3",
    "fileName": "2025-06-25-spring3.html",
    "filePath": "java/2025-06-25-spring3.html",
    "title": "Spring项目快速学习（3天）",
    "description": "【Mini-Spring】Spring项目快速学习（3天）\r\n\r\n 第一章 IOC基础\r\n\r\n使用IOC容器解决同类服务灵活切换问题\r\n\r\n依赖注入（Dependency Injection, DI） 是一种 设计模式，用于管理类与其依赖对象之间的关系。它的核心思想是...",
    "publishedAt": "2025-06-25",
    "category": "java",
    "categoryDisplayName": "Java",
    "tags": [],
    "readTime": "1 分钟阅读",
    "views": 523,
    "featured": true,
    "excerpt": "【Mini-Spring】Spring项目快速学习（3天）\r\n\r\n 第一章 IOC基础\r\n\r\n使用IOC容器解决同类服务灵活切换问题\r\n\r\n依赖注入（Dependency Injection, DI） 是一种 设计模式，用于管理类与其依赖对象之间的关系。它的核心思想是将依赖项（对象）从外部传递给需要它的类，而不是在类内部创建或查找依赖项。这样可以降低代码的耦..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "devops/2025-06-25-post.html",
    "title": "文件存储服务器",
    "description": "本文主要记录一下`docker`如何安装和启动`minio`，先看一下成功启动的步骤：\r\n\r\n首先下载相关镜像：\r\n\r\n```bash\r\nbash 代码解读复制代码 搜索minio镜像\r\ndocker search minio\r\n 下载minio/minio\r\ndocker pull minio...",
    "publishedAt": "2025-06-25",
    "category": "devops",
    "categoryDisplayName": "DevOps",
    "tags": [],
    "readTime": "3 分钟阅读",
    "views": 168,
    "featured": false,
    "excerpt": "本文主要记录一下`docker`如何安装和启动`minio`，先看一下成功启动的步骤：\r\n\r\n首先下载相关镜像：\r\n\r\n```bash\r\nbash 代码解读复制代码 搜索minio镜像\r\ndocker search minio\r\n 下载minio/minio\r\ndocker pull minio/minio\r\n```\r\n\r\n创建文件挂载目录：\r\n\r\n```bash\r\nbash 代码解读复制代码..."
  },
  {
    "id": "2025-06-25-mysql",
    "fileName": "2025-06-25-mysql.html",
    "filePath": "database/2025-06-25-mysql.html",
    "title": "一篇文章讲清楚MySQL的聚簇联合覆盖索引、回表、索引下推",
    "description": "[一篇文章讲清楚MySQL的聚簇/联合/覆盖索引、回表、索引下推](https://www.cnblogs.com/yidengjiagou/p/16410968.html)\r\n\r\n> 迎面走来了你的面试官，身穿格子衫，挺着啤酒肚，发际线严重后移的中年男子。\r\n> 手拿泡着枸杞的保温杯，胳膊夹着...",
    "publishedAt": "2025-06-25",
    "category": "database",
    "categoryDisplayName": "数据库",
    "tags": [],
    "readTime": "4 分钟阅读",
    "views": 170,
    "featured": false,
    "excerpt": "[一篇文章讲清楚MySQL的聚簇/联合/覆盖索引、回表、索引下推](https://www.cnblogs.com/yidengjiagou/p/16410968.html)\r\n\r\n> 迎面走来了你的面试官，身穿格子衫，挺着啤酒肚，发际线严重后移的中年男子。\r\n> 手拿泡着枸杞的保温杯，胳膊夹着MacBook，MacBook上还贴着公司标语：“加班使我快乐”。\r\n\r\n![img](https:..."
  },
  {
    "id": "2025-06-25-channelhandlercontextpipeline",
    "fileName": "2025-06-25-channelhandlercontextpipeline.html",
    "filePath": "java/2025-06-25-channelhandlercontextpipeline.html",
    "title": "ChannelHandlerContext和Pipeline",
    "description": "Netty ChannelHandlerContext 和 Pipeline 作用\n_Exported on 2025/6/10 at GMT+8 16:13:31 from Cursor (1.0.0)_\n\n---\n\nUser\n\n能列举说明所有Netty中ChannelHandlerC...",
    "publishedAt": "2025-06-25",
    "category": "java",
    "categoryDisplayName": "Java",
    "tags": [],
    "readTime": "5 分钟阅读",
    "views": 528,
    "featured": false,
    "excerpt": "Netty ChannelHandlerContext 和 Pipeline 作用\n_Exported on 2025/6/10 at GMT+8 16:13:31 from Cursor (1.0.0)_\n\n---\n\nUser\n\n能列举说明所有Netty中ChannelHandlerContext的接口作用handler构成的Pipelinei链路的效果吗\n\n---\n\nCurso..."
  },
  {
    "id": "2025-06-25-flask",
    "fileName": "2025-06-25-flask.html",
    "filePath": "python/2025-06-25-flask.html",
    "title": "Flask 的基本使用",
    "description": "Flask 是一个轻量级的 Python Web 框架，它被广泛用于构建 Web 应用程序和 API。Flask 简单易用，具有灵活性和可扩展性，是许多开发者喜欢用其构建项目的原因。本文将介绍 Flask 是什么以及如何使用它来构建 Web 应用程序，同时提供一个实践案例，让你能够在 IDE 编辑器...",
    "publishedAt": "2025-06-25",
    "category": "python",
    "categoryDisplayName": "Python",
    "tags": [],
    "readTime": "3 分钟阅读",
    "views": 534,
    "featured": true,
    "excerpt": "Flask 是一个轻量级的 Python Web 框架，它被广泛用于构建 Web 应用程序和 API。Flask 简单易用，具有灵活性和可扩展性，是许多开发者喜欢用其构建项目的原因。本文将介绍 Flask 是什么以及如何使用它来构建 Web 应用程序，同时提供一个实践案例，让你能够在 IDE 编辑器中运行代码。\r\n\r\n\r\nFlask 官网地址：https://flask.palletsprojec..."
  },
  {
    "id": "2025-06-25-sa-token",
    "fileName": "2025-06-25-sa-token.html",
    "filePath": "java/2025-06-25-sa-token.html",
    "title": "使用 Sa-Token 的全局过滤器解决跨域问题（三种方式全版）",
    "description": "使用 Sa-Token 的全局过滤器解决跨域问题（三种方式全版）\r\n\r\n在 web 开发中，跨域绝对是比较折磨新同学的一个问题，本文将讲解三种常见的跨域情形，并讲解如何使用 Sa-Token 框架解决跨域问题。\r\n\r\n 什么情况下会发生跨域\r\n\r\n简单理解，就是你在 A 域名下的页面，去调...",
    "publishedAt": "2025-06-25",
    "category": "java",
    "categoryDisplayName": "Java",
    "tags": [],
    "readTime": "1 分钟阅读",
    "views": 242,
    "featured": false,
    "excerpt": "使用 Sa-Token 的全局过滤器解决跨域问题（三种方式全版）\r\n\r\n在 web 开发中，跨域绝对是比较折磨新同学的一个问题，本文将讲解三种常见的跨域情形，并讲解如何使用 Sa-Token 框架解决跨域问题。\r\n\r\n 什么情况下会发生跨域\r\n\r\n简单理解，就是你在 A 域名下的页面，去调用 B 域名的接口，浏览器感觉你这次调用可能是不安全的请求行为，于是它需要用 cors 安全策略来确..."
  },
  {
    "id": "2025-06-25-configuration",
    "fileName": "2025-06-25-configuration.html",
    "filePath": "java/2025-06-25-configuration.html",
    "title": "@Configuration没生效可能的原因 & 解决方案",
    "description": "title: SpringBoot中@Configuration没有生效\r\n\r\n- `@Configuration` 没有生效，可能的原因如下：\r\n\r\n   🔍 可能的原因 & 解决方案\r\n\r\n  ------\r\n\r\n   1️⃣ `@Configuration` 所在的包...",
    "publishedAt": "2025-06-25",
    "category": "java",
    "categoryDisplayName": "Java",
    "tags": [],
    "readTime": "3 分钟阅读",
    "views": 289,
    "featured": false,
    "excerpt": "title: SpringBoot中@Configuration没有生效\r\n\r\n- `@Configuration` 没有生效，可能的原因如下：\r\n\r\n   🔍 可能的原因 & 解决方案\r\n\r\n  ------\r\n\r\n   1️⃣ `@Configuration` 所在的包不在 Spring Boot 扫描范围内\r\n\r\n  问题：\r\n   Spring Boo..."
  },
  {
    "id": "2025-06-25-tomcat",
    "fileName": "2025-06-25-tomcat.html",
    "filePath": "server/2025-06-25-tomcat.html",
    "title": "tomcat 日志详解",
    "description": "1 tomcat 日志详解\r\n\r\n 1.1 tomcat 日志配置文件\r\n\r\n　　tomcat 对应日志的配置文件：tomcat目录下的/conf/logging.properties。\r\n\r\n　　tomcat 的日志等级有：日志输出级别：SEVERE (最高级别) >...",
    "publishedAt": "2025-06-25",
    "category": "server",
    "categoryDisplayName": "服务器",
    "tags": [],
    "readTime": "5 分钟阅读",
    "views": 230,
    "featured": true,
    "excerpt": "1 tomcat 日志详解\r\n\r\n 1.1 tomcat 日志配置文件\r\n\r\n　　tomcat 对应日志的配置文件：tomcat目录下的/conf/logging.properties。\r\n\r\n　　tomcat 的日志等级有：日志输出级别：SEVERE (最高级别) > WARNING > INFO > CONFIG > FINE > FINER(精心) > FINES..."
  },
  {
    "id": "2025-06-25-unity",
    "fileName": "2025-06-25-unity.html",
    "filePath": "gamedev/2025-06-25-unity.html",
    "title": "Unity开发规范",
    "description": "【Unity学习】Unity开发规范\r\n\r\n Unity操作指南\r\n\r\n 基础操作规范\r\n\r\n 1. 场景操作\r\n- 创建新场景：\r\n  1. 在Project窗口中右键 → Create → Scene\r\n  2. 将新场景保存到 `Assets/Scenes` 目录下\r\n  3....",
    "publishedAt": "2025-06-25",
    "category": "gamedev",
    "categoryDisplayName": "游戏开发",
    "tags": [],
    "readTime": "3 分钟阅读",
    "views": 136,
    "featured": false,
    "excerpt": "【Unity学习】Unity开发规范\r\n\r\n Unity操作指南\r\n\r\n 基础操作规范\r\n\r\n 1. 场景操作\r\n- 创建新场景：\r\n  1. 在Project窗口中右键 → Create → Scene\r\n  2. 将新场景保存到 `Assets/Scenes` 目录下\r\n  3. 在Build Settings中添加场景（File → Build Settings）..."
  },
  {
    "id": "2025-06-25-ssh-key-github",
    "fileName": "2025-06-25-ssh-key-github.html",
    "filePath": "frontend/2025-06-25-ssh-key-github.html",
    "title": "SSH key认证 推送、拉取GitHub项目",
    "description": "微信开发者工具 SSH key认证 推送、拉取GitHub项目\r\n因为从2021年8月14日之后，使用git对github进行身份验证操作的时候不再接受使用账号密码形式clone和push代码，今天就琢磨了下ssh key的方式来上传下拉代码，要注意的细节还是有的所以记录一下。\r\n\r\n1.下载安装、...",
    "publishedAt": "2025-06-25",
    "category": "frontend",
    "categoryDisplayName": "前端开发",
    "tags": [],
    "readTime": "2 分钟阅读",
    "views": 345,
    "featured": false,
    "excerpt": "微信开发者工具 SSH key认证 推送、拉取GitHub项目\r\n因为从2021年8月14日之后，使用git对github进行身份验证操作的时候不再接受使用账号密码形式clone和push代码，今天就琢磨了下ssh key的方式来上传下拉代码，要注意的细节还是有的所以记录一下。\r\n\r\n1.下载安装、配置git。\r\ngit官网地址https://git-scm.com/，安装完后记得设置用户名和邮箱..."
  },
  {
    "id": "2025-06-25-acwing",
    "fileName": "2025-06-25-acwing.html",
    "filePath": "algorithm/2025-06-25-acwing.html",
    "title": "Acwing的基础算法",
    "description": "---\r\ntitle:Acwing的基础算法\r\n---\r\n\r\n![image-20231227203029359](D:\\typora笔记\\基础算法.assets\\image-20231227203029359.png)\r\n\r\n\r\n\r\n 快速排序\r\n\r\n```c++\r\nvoid quick_...",
    "publishedAt": "2025-06-25",
    "category": "algorithm",
    "categoryDisplayName": "算法",
    "tags": [],
    "readTime": "20 分钟阅读",
    "views": 116,
    "featured": false,
    "excerpt": "---\r\ntitle:Acwing的基础算法\r\n---\r\n\r\n![image-20231227203029359](D:\\typora笔记\\基础算法.assets\\image-20231227203029359.png)\r\n\r\n\r\n\r\n 快速排序\r\n\r\n```c++\r\nvoid quick_sort(int q[], int l, int r)\r\n{\r\n    if (l >= r) re..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "project/2025-06-25-post.html",
    "title": "单体应用升级微服务拆分方案",
    "description": "我先了解一下您的应用结构，以便给出适合的微服务改造建议。\r\n\r\nRan tool\r\n\r\nRan tool\r\n\r\nRead file: app_order/pom.xml\r\n\r\nRan tool\r\n\r\nRan tool\r\n\r\nRead file: app_order/src/main/java/com...",
    "publishedAt": "2025-06-25",
    "category": "project",
    "categoryDisplayName": "项目",
    "tags": [],
    "readTime": "16 分钟阅读",
    "views": 491,
    "featured": false,
    "excerpt": "我先了解一下您的应用结构，以便给出适合的微服务改造建议。\r\n\r\nRan tool\r\n\r\nRan tool\r\n\r\nRead file: app_order/pom.xml\r\n\r\nRan tool\r\n\r\nRan tool\r\n\r\nRead file: app_order/src/main/java/com/jf3q/order/AppOrderApplication.java\r\n\r\nSearch fil..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "project/2025-06-25-post.html",
    "title": "学生报到管理系统技术架构说明",
    "description": "学生报到管理系统技术架构说明\r\n\r\n 1. 系统概述\r\n\r\n学生报到管理系统是一个基于微信小程序的应用，主要用于高校新生报到管理。系统支持学生信息管理、报到流程管理、数据统计等功能，帮助学校高效完成新生报到工作。系统以微信小程序作为前端，利用微信云开发提供后端服务支持，实现了完整的报到流程管...",
    "publishedAt": "2025-06-25",
    "category": "project",
    "categoryDisplayName": "项目",
    "tags": [],
    "readTime": "4 分钟阅读",
    "views": 472,
    "featured": false,
    "excerpt": "学生报到管理系统技术架构说明\r\n\r\n 1. 系统概述\r\n\r\n学生报到管理系统是一个基于微信小程序的应用，主要用于高校新生报到管理。系统支持学生信息管理、报到流程管理、数据统计等功能，帮助学校高效完成新生报到工作。系统以微信小程序作为前端，利用微信云开发提供后端服务支持，实现了完整的报到流程管理。\r\n\r\n 2. 技术栈\r\n\r\n 2.1 前端技术\r\n- 微信小程序原生开发：使..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "algorithm/2025-06-25-post.html",
    "title": "二分查找",
    "description": "---\r\n title: 二分查找\r\n---\r\n\r\n 蓝红模板\r\n\r\n因为这个模板是比较常用而且我认为学习是最容易理解且网上也有许多教程和视频所以分享一些对题目理解以及我们所需要的一些注意的东西\r\n\r\n首先什么是蓝红模板\r\n\r\n```\r\nint search(int nums...",
    "publishedAt": "2025-06-25",
    "category": "algorithm",
    "categoryDisplayName": "算法",
    "tags": [],
    "readTime": "2 分钟阅读",
    "views": 390,
    "featured": false,
    "excerpt": "---\r\n title: 二分查找\r\n---\r\n\r\n 蓝红模板\r\n\r\n因为这个模板是比较常用而且我认为学习是最容易理解且网上也有许多教程和视频所以分享一些对题目理解以及我们所需要的一些注意的东西\r\n\r\n首先什么是蓝红模板\r\n\r\n```\r\nint search(int nums, int numsSize, int target){\r\nint left=-1,right=nu..."
  },
  {
    "id": "2025-06-25-post",
    "fileName": "2025-06-25-post.html",
    "filePath": "algorithm/2025-06-25-post.html",
    "title": "动态规划",
    "description": "[TOC]\r\n\r\n title: 动态规划\r\n\r\n 动态规划方法论以及背包问题\r\n\r\n状态表示f[i,j]\r\n\r\n​\t\t集合 \r\n\r\n​\t\t\t\t所有选法\r\n\r\n​\t\t\t\t条件 1. 只从前i个物品中选 2. 总体积<=j\r\n\r\n​\t\t\t\t背包问题：所有只从前i个物品选，并且总体积不超...",
    "publishedAt": "2025-06-25",
    "category": "algorithm",
    "categoryDisplayName": "算法",
    "tags": [],
    "readTime": "14 分钟阅读",
    "views": 243,
    "featured": false,
    "excerpt": "[TOC]\r\n\r\n title: 动态规划\r\n\r\n 动态规划方法论以及背包问题\r\n\r\n状态表示f[i,j]\r\n\r\n​\t\t集合 \r\n\r\n​\t\t\t\t所有选法\r\n\r\n​\t\t\t\t条件 1. 只从前i个物品中选 2. 总体积<=j\r\n\r\n​\t\t\t\t背包问题：所有只从前i个物品选，并且总体积不超过j的选法\r\n\r\n​\t\t\t\t\t\t\t\t\t只从前i组物品中选，并且总体积不超过j的选法\r\n\r\n​\t\t属性..."
  },
  {
    "id": "2025-06-25-vscode-code-runner-golang",
    "fileName": "2025-06-25-vscode-code-runner-golang.html",
    "filePath": "tools/2025-06-25-vscode-code-runner-golang.html",
    "title": "如何使用 VSCode 中的 Code Runner 插件执行 golang 代码",
    "description": "---\r\n\r\ntitle:如何使用 VSCode 中的 Code Runner 插件执行 golang 代码\r\n\r\n---\r\n\r\n\r\n\r\nproject 的文档结如下\r\n\r\nmylab\r\n   |—- main.go\r\n   |—- test.go\r\n\r\nmain.go\r\n\r\n```go\r\npack...",
    "publishedAt": "2025-06-25",
    "category": "tools",
    "categoryDisplayName": "开发工具",
    "tags": [],
    "readTime": "5 分钟阅读",
    "views": 52,
    "featured": false,
    "excerpt": "---\r\n\r\ntitle:如何使用 VSCode 中的 Code Runner 插件执行 golang 代码\r\n\r\n---\r\n\r\n\r\n\r\nproject 的文档结如下\r\n\r\nmylab\r\n   |—- main.go\r\n   |—- test.go\r\n\r\nmain.go\r\n\r\n```go\r\npackage main\r\n\r\nfunc main() {\r\n\ttest()\r\n}\r\n```\r\n\r\ntest..."
  },
  {
    "id": "2025-01-21-2025-01-21-java-learning",
    "fileName": "2025-01-21-2025-01-21-java-learning.html",
    "filePath": "other/2025-01-21-2025-01-21-java-learning.html",
    "title": "2025-01-21-java-learning",
    "description": "---\r\ntitle: \"Java学习之路：从入门到进阶\"\r\ndate: \"2025-01-21\"\r\ncategory: \"java\"\r\ntags: [\"Java\", \"学习路线\", \"编程\"]\r\ndescription: \"分享我的Java学习经验，从基础语法到高级特性的完整学习路线。\"\r\n---...",
    "publishedAt": "2025-01-21",
    "category": "other",
    "categoryDisplayName": "其他",
    "tags": [],
    "readTime": "3 分钟阅读",
    "views": 264,
    "featured": false,
    "excerpt": "---\r\ntitle: \"Java学习之路：从入门到进阶\"\r\ndate: \"2025-01-21\"\r\ncategory: \"java\"\r\ntags: [\"Java\", \"学习路线\", \"编程\"]\r\ndescription: \"分享我的Java学习经验，从基础语法到高级特性的完整学习路线。\"\r\n---\r\n\r\n Java学习之路：从入门到进阶\r\n\r\nJava作为一门经典的编程语言，在企业开发中占据重..."
  },
  {
    "id": "2025-01-20-2025-01-20-my-first-post",
    "fileName": "2025-01-20-2025-01-20-my-first-post.html",
    "filePath": "other/2025-01-20-2025-01-20-my-first-post.html",
    "title": "2025-01-20-my-first-post",
    "description": "---\r\ntitle: \"我的第一篇博客文章\"\r\ndate: \"2025-01-20\"\r\ncategory: \"other\"\r\ntags: [\"入门\", \"博客\", \"Markdown\"]\r\ndescription: \"这是我的第一篇使用Markdown格式的博客文章，介绍如何使用这个博客系统。\"...",
    "publishedAt": "2025-01-20",
    "category": "other",
    "categoryDisplayName": "其他",
    "tags": [],
    "readTime": "2 分钟阅读",
    "views": 454,
    "featured": false,
    "excerpt": "---\r\ntitle: \"我的第一篇博客文章\"\r\ndate: \"2025-01-20\"\r\ncategory: \"other\"\r\ntags: [\"入门\", \"博客\", \"Markdown\"]\r\ndescription: \"这是我的第一篇使用Markdown格式的博客文章，介绍如何使用这个博客系统。\"\r\n---\r\n\r\n 我的第一篇博客文章\r\n\r\n欢迎来到我的博客！这是我使用新的博客系统发布的第一篇文..."
  },
  {
    "id": "2025-01-03-20250103-github",
    "fileName": "2025-01-03-20250103-github.html",
    "filePath": "blog/2025-01-03-20250103-github.html",
    "title": "2025.01.03 实现本地仓库和GitHub的自动化同步（博客）",
    "description": "自动同步Github的Blog\r\n\r\n1. 配置好你需要的脚本\r\n\r\n2. 创建一个批处理文件运行这个脚本\r\n\r\n3. 创建一个批处理文件运行上面的批处理文件防止cmd闪退，然后start+批处理文件路径\r\n\r\n4. 右键我的电脑-管理-系统计划程序-创建基本任务可以随意命名，选择想要启动的时间...",
    "publishedAt": "2025-01-03",
    "category": "blog",
    "categoryDisplayName": "博客",
    "tags": [],
    "readTime": "1 分钟阅读",
    "views": 329,
    "featured": false,
    "excerpt": "自动同步Github的Blog\r\n\r\n1. 配置好你需要的脚本\r\n\r\n2. 创建一个批处理文件运行这个脚本\r\n\r\n3. 创建一个批处理文件运行上面的批处理文件防止cmd闪退，然后start+批处理文件路径\r\n\r\n4. 右键我的电脑-管理-系统计划程序-创建基本任务可以随意命名，选择想要启动的时间来启动脚本，找到步骤三创建的批处理文件打开，点击完成即可\r\n\r\nref: https://www.b..."
  },
  {
    "id": "2025-01-02-20250102",
    "fileName": "2025-01-02-20250102.html",
    "filePath": "blog/2025-01-02-20250102.html",
    "title": "2025.01.02 如何搭建一个属于自己的博客",
    "description": "---\r\ntitle: 【2025.01.02】开始搭建个人博客\r\n---\r\n\r\n 2024年，如何使用 github pages + Hexo + Next 搭建个人博客\r\n\r\n 为什么要搭建个人博客？\r\n\r\n细细回想，今年已经是我踏足计算机领域的第5年了。从最开始懵懂无知的大一新生，经过大...",
    "publishedAt": "2025-01-02",
    "category": "blog",
    "categoryDisplayName": "博客",
    "tags": [],
    "readTime": "7 分钟阅读",
    "views": 159,
    "featured": false,
    "excerpt": "---\r\ntitle: 【2025.01.02】开始搭建个人博客\r\n---\r\n\r\n 2024年，如何使用 github pages + Hexo + Next 搭建个人博客\r\n\r\n 为什么要搭建个人博客？\r\n\r\n细细回想，今年已经是我踏足计算机领域的第5年了。从最开始懵懂无知的大一新生，经过大学四年专业课的学习与磨练，对于计算机科学有了最为基本的了解，到现在步入研究生阶段，选定了自己感兴趣且..."
  },
  {
    "id": "2025-01-02-20250102",
    "fileName": "2025-01-02-20250102.html",
    "filePath": "blog/2025-01-02-20250102.html",
    "title": "2025.01.02 记录搭建博客的坑",
    "description": "---\r\ntitle: 【2025.01.02】记录搭建博客时候的坑\r\n---\r\n\r\n 在克隆github上面的Next主题的时候遇到问题\r\n\r\n```\r\n git clone --branch v5.1.2 https://github.com/iissnan/hexo-theme-ne...",
    "publishedAt": "2025-01-02",
    "category": "blog",
    "categoryDisplayName": "博客",
    "tags": [],
    "readTime": "5 分钟阅读",
    "views": 270,
    "featured": true,
    "excerpt": "---\r\ntitle: 【2025.01.02】记录搭建博客时候的坑\r\n---\r\n\r\n 在克隆github上面的Next主题的时候遇到问题\r\n\r\n```\r\n git clone --branch v5.1.2 https://github.com/iissnan/hexo-theme-next themes/next\r\n```\r\n\r\n```\r\nfatal: unable to acces..."
  }
]